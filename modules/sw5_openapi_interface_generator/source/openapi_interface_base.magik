#% text_encoding = iso8859_1
_package user

_pragma(classify_level=advanced, topic={api})
##
## Base exemplar for generated APIs from `openapi_interface_generator` script.
##
def_slotted_exemplar(
	:openapi_interface_base,
	{
	},
	{@user:openapi_validator_mixin})
$

_pragma(classify_level=advanced, topic={api})
_abstract _private _method openapi_interface_base.api_base_path
	## Get API base path. To be overridden by a shared_constant.
	## @return {sw:char16_vector}
_endmethod
$

_pragma(classify_level=advanced, topic={api})
_private _method openapi_interface_base.build_uri(base_uri, path_params, query_params)
	## Build URI from parts.
	## @param {sw:char16_vector} base_uri
	## @param {sw:equality_hash_table} path_params
	## @param {sw:equality_hash_table} query_params
	## @return {sw:char16_vector}
	_local uri << base_uri

	_for key, value _over path_params.fast_keys_and_elements()
	_loop
		_local pattern << write_string("\{", key, "}")
		uri << sw_regexp.new(pattern).replace_all(uri, value.write_string)
	_endloop

	_local query_items << rope.new()
	_for key, value _over query_params.fast_keys_and_elements()
	_loop
		_local query_item << write_string(key, "=", value)
		query_items.add(query_item)
	_endloop
	_if _not query_items.empty?
	_then
		uri << uri + "?" + query_items.join_as_strings("&")
	_endif

	_return _self.api_base_path + uri
_endmethod
$

_pragma(classify_level=advanced, topic={api})
_private _method openapi_interface_base.get_headers(method, uri)
	## Get headers for method/uri.
	## @param {sw:char16_vector} method
	## @param {sw:char16_vector} uri
	## @return {sw:equality_property_list}
	_local headers << sw:equality_property_list.new()
	headers["Accept"] << "application/json"
	_return headers
_endmethod
$

_pragma(classify_level=advanced, topic={api})
_private _method openapi_interface_base.do_request(method, uri, headers, _optional body)
	## Fire a request.
	## @param {sw:char16_vector} method HTTP Method.
	## @param {sw:char16_vector} uri URI to call.
	## @param {sw:equality_property_list} headers Headers to send.
	## @param {sw:equality_property_list} body Body to send.
	## @return {sw:char16_vector} Response body.
	## @return {sw:http} http thing.
	_local magik_http << http.new(uri)
	_local request_headers << rope.new()
	_for key, value _over headers.fast_keys_and_elements()
	_loop
		_local pair << {key, value}
		request_headers.add_last(pair)
	_endloop
	_local response_body << magik_http.perform(method.lowercase + :|()|, request_headers)
	_local response_status_code << magik_http.status_code
	_if response_status_code _div 100 <> 2
	_then
		condition.raise(
			:api_response_error,
			:status_code, response_status_code,
			:body, response_body)
	_endif
	_return response_body, magik_http
_endmethod
$
