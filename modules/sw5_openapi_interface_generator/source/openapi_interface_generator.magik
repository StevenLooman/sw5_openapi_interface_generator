#% text_encoding = iso8859_1
_package user

_pragma(classify_level=advanced, topic={openapi})
##
## API Generator from a OpenAPI 3.0 spec.
##
## @slot {sw:char16_vector} api_docs_path
## @slot {sw:char16_vector} base_path
## @slot {sw:char16_vector} exemplar_name
## @slot {sw:char16_vector} target_path
## @slot {sw:hash_table} api_specs
## @slot {sw:text_buffered_output_stream} output_stream
##
def_slotted_exemplar(
	:openapi_interface_generator,
	{
		{:api_docs_path, _unset},
		{:base_path, _unset},
		{:exemplar_name, _unset},
		{:target_path, _unset},
		{:api_specs, _unset},
		{:output_stream, _unset}
	})
$

_pragma(classify_level=advanced, topic={openapi})
## Type mapping, from OpenAPI to Smallworld.
## @return {sw:equality_property_list}
openapi_interface_generator.define_shared_constant(
	:type_mapping,
	sw:equality_property_list.new_with(
		"string", sw:char16_vector,
		"integer", sw:integer,
		"boolean", sw:false,
		"array", sw:rope),
	:private)
$

_pragma(classify_level=advanced, topic={openapi})
## Format validators.
## @return {sw:equality_property_list}
openapi_interface_generator.define_shared_constant(
	:format_validators,
	sw:equality_property_list.new_with(
		"uuid", "_self.uuid_predicate",
		"date-time", "_self.date_time_predicate"),
	:private)
$

_pragma(classify_level=advanced, topic={openapi})
_method openapi_interface_generator.new(api_docs_path, base_path, exemplar_name, target_path)
	## Constructor.
	## @param {sw:char16_vector} api_docs_path Path to `swagger.json`/`api_docs.json`.
	## @param {sw:char16_vector} base_path Base path of URI.
	## @param {sw:char16_vector} exemplar_name Name of exemplar.
	## @param {sw:char16_vector} target_path Path to file to generate.
	## @return {_self}
	_return _clone.init(api_docs_path, base_path, exemplar_name, target_path)
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.init(api_docs_path, base_path, exemplar_name, target_path)
	## Initializer.
	## @param {sw:char16_vector} api_docs_path Path to `swagger.json`
	## @param {sw:char16_vector} base_path Base path of URI.
	## @param {sw:char16_vector} exemplar_name Name of exemplar.
	## @param {sw:char16_vector} target_path Path to file to generate.
	## @return {_self}
	_if _not system.file_exists?(api_docs_path)
	_then
		sw:condition.raise(:file_does_not_exist, :filename, api_docs_path)
	_endif

	.api_docs_path << api_docs_path
	.base_path << base_path
	.api_specs << _unset
	.exemplar_name << exemplar_name
	.target_path << target_path
	_return _self
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_method openapi_interface_generator.generate_api()
	## Generate Magik representation of API.
	_local decoder << sw:json_decoder.new()
	.api_specs << decoder.parse_file(.api_docs_path)

	# Ensure version 3.0.x.
	_local version << .api_specs[:openapi]
	_local version_parts << version.split_by(%.)
	_if version_parts[1] <> "3" _andif
	    version_parts[2] <> "0"
	_then
		sw:condition.raise(:error, :string, "Unsupported version: " + version)
	_endif

	.output_stream << _self.create_output_stream()
	_protect
		_self.generate_file_intro()
		_self.generate_exemplar()
		_self.generate_shared_constants()
		_self.generate_object_parsers()
		_self.generate_operations()
	_protection
		.output_stream.close()
	_endprotect
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.generate_file_intro()
	## Generate file intro.
	.output_stream.write("#% text_encoding = iso8859_1", sw:character.newline)
	.output_stream.write("_package user", sw:character.newline)
	.output_stream.write(character.newline)
	.output_stream.write("# This file is generated using the openapi_interface_generator from file: ", .api_docs_path, sw:character.newline)
	.output_stream.write(character.newline)
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.generate_exemplar()
	## Generate exemplar.
	.output_stream.write("_pragma(classify_level=advanced, topic={openapi})", sw:character.newline)
	.output_stream.write("##", sw:character.newline)
	.output_stream.write("## TODO: Insert name of API", sw:character.newline)
	.output_stream.write("##", sw:character.newline)
	.output_stream.write("def_slotted_exemplar(", sw:character.newline)
	.output_stream.write("  :", .exemplar_name, ",", sw:character.newline)
	.output_stream.write("  {", sw:character.newline)
	.output_stream.write("  },", sw:character.newline)
	.output_stream.write("  {@user:openapi_interface_base})", sw:character.newline)
	.output_stream.write("$", sw:character.newline)
	.output_stream.write(character.newline)
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.generate_shared_constants()
	## Generate shared constants.
	.output_stream.write("_pragma(classify_level=advanced, topic={openapi})", sw:character.newline)
	.output_stream.write("## Get the base path of the end point.", sw:character.newline)
	.output_stream.write("## @return {sw:char16_vector}", sw:character.newline)
	.output_stream.write(.exemplar_name, ".define_shared_constant(", sw:character.newline)
	.output_stream.write("  :base_path,", sw:character.newline)
	.output_stream.write("  '", .base_path, "',", sw:character.newline)
	.output_stream.write("  :private)", sw:character.newline)
	.output_stream.write("$", sw:character.newline)
	.output_stream.write(character.newline)
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.generate_operations()
	## Generate methods from operations.
	_local paths << sw:property_list.new_from(.api_specs[:paths]).sorted_by_key()
	_for path, op_spec _over paths.fast_keys_and_elements()
	_loop
		_for method, spec _over op_spec.fast_keys_and_elements()
		_loop
			# Method start.
			_local spec_operation_id << spec[:|operationId|]
			_local method_name << spec_operation_id.write_string.as_snake_case()
			_local spec_parameters << spec[:parameters].default({})
			_local map_parameter_name <<
				_proc@map_spec_parameter(spec_parameter)
					## @param {sw:hash_table} spec_parameter
					_return spec_parameter[:name].as_snake_case()
				_endproc
			_local method_parameters << spec_parameters.map(map_parameter_name)
			_if spec.includes_key?(:|requestBody|)
			_then
				method_parameters << sw:simple_vector.concatenation(method_parameters, {:request_body})
			_endif

			.output_stream.write("_pragma(classify_level=advanced, topic={openapi})", sw:character.newline)
			.output_stream.write("_method ", .exemplar_name, ".", method_name, "(", method_parameters.join_as_strings(", "), ")", sw:character.newline)
			.output_stream.write("  ## ", sw:sw_regexp.new("_").replace_all(method_name, " "), sw:character.newline)
			.output_stream.write("  ## Operation ID: ", spec_operation_id, sw:character.newline)
			.output_stream.write("  ## URL: ", method.write_string.uppercase, " ", path, sw:character.newline)
			.output_stream.write("  ## Tags: ", spec[:tags].join_as_strings(", "), sw:character.newline)
			_for spec_parameter _over spec_parameters.fast_elements()
			_loop
				_local parameter_name << map_parameter_name(spec_parameter)
				_local parameter_type << _self.get_parameter_type(spec_parameter)
				_local parameter_description << _self.get_parameter_description(spec_parameter)
				.output_stream.write("  ## @param {", parameter_type, "} ", parameter_name, " ", parameter_description, sw:character.newline)
			_endloop
			_if spec.includes_key?(:|requestBody|)
			_then
				_local request_body_spec << spec[:|requestBody|]
				_local schema_name << _self.get_schema_name(request_body_spec)
				.output_stream.write("  ## @param {sw:equality_property_list} request_body Schema: ", schema_name, sw:character.newline)
			_endif

			# Method body.
			_self.generate_method_body(path, method, spec)

			# Method end.
			.output_stream.write("_endmethod", sw:character.newline)
			.output_stream.write("$", sw:character.newline)
			.output_stream.write(character.newline)
		_endloop
	_endloop
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.generate_method_body(path, method, spec)
	## Generate method from spec.
	## @param {sw:symbol} path
	## @param {sw:symbol} method
	## @param {sw:hash_table} spec
	.output_stream.write("  _local path_parameters << sw:equality_property_list.new()", sw:character.newline)
	.output_stream.write("  _local query_parameters << sw:equality_property_list.new()", sw:character.newline)

	# Validate + record parameters.
	_self.generate_parameter_validation(spec)

	# Build URI.
	_self.generate_build_uri(path, spec)

	# Body parameters.
	_if spec.includes_key?(:|requestBody|)
	_then
		_local request_body_spec << spec[:|requestBody|]
		_self.generate_body_validation(request_body_spec)
	_else
		.output_stream.write("  _local body << _unset", sw:character.newline)
	_endif

	# Do call.
	_self.generate_do_request(method, path)
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.generate_do_request(method, path)
	## Generate do call.
	## @param {sw:symbol} method
	## @param {sw:char16_vector} path
	.output_stream.write("  _local headers << _self.get_headers('", method.write_string.uppercase, "', '", path, "')", sw:character.newline)
	.output_stream.write("  _return _self.do_request('", method.write_string.uppercase, "', uri, headers, body)", sw:character.newline)
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.generate_parameter_validation(spec)
	## Generate validation of parameters.
	## @param {sw:hash_table} spec
	_local spec_parameters << spec[:parameters].default({})
	_for spec_parameter _over spec_parameters.fast_elements()
	_loop
		# Currently only query/path parameters are supported, and
		# only supports primitives as input parameters.
		_local api_parameter << spec_parameter[:name]
		.output_stream.write(sw:character.newline)
		.output_stream.write("  # Parameter: ", api_parameter, sw:character.newline)
		_local mandatory? << spec_parameter[:required] _is _true
		_local method_parameter << api_parameter.as_snake_case()
		_if mandatory?
		_then
			.output_stream.write("  _if ", method_parameter, " _is _unset", sw:character.newline)
			.output_stream.write("  _then", sw:character.newline)
			.output_stream.write("	  sw:condition.raise(:mandatory_parameter_missing, :name, '", method_parameter, "')", sw:character.newline)
			.output_stream.write("  _endif", sw:character.newline)
		_endif

		_local spec_parameter_in << spec_parameter[:in]
		_local gatherer <<
			_if spec_parameter_in = "query"
			_then
				>> "query_parameters"
			_elif spec_parameter_in = "path"
			_then
				>> "path_parameters"
			_else
				sw:condition.raise(:not_yet_implemented, :function, spec_parameter_in)
			_endif
		_local schema << spec_parameter[:schema]
		_local schema_type <<
			_if schema.includes_key?(:type)
			_then
				>> schema[:type]
			_endif
		_if schema_type _isnt _unset _andif
		    openapi_interface_base.method(:|parse_| + schema_type + :|()|) _is _unset
		_then
			sw:condition.raise(:not_yet_implemented, :function, :|parse_| + schema_type)
		_endif
		_local validator << _self.get_schema_validator(schema)
		_if _not mandatory?
		_then
			.output_stream.write("  _if ", method_parameter, " _isnt _unset", sw:character.newline)
			.output_stream.write("  _then", sw:character.newline)
			.output_stream.write("	  ", gatherer, "['", api_parameter, "'] << _self.parse_", schema_type, "(", method_parameter, ", ", validator, ")", sw:character.newline)
			.output_stream.write("  _endif", sw:character.newline)
		_else
			.output_stream.write("  ", gatherer, "['", api_parameter, "'] << _self.parse_", schema_type, "(", method_parameter, ", ", validator, ")", sw:character.newline)
		_endif
	_endloop
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.generate_build_uri(path, spec)
	## Generate request body build uri.
	## @param {sw:char16_vector} path
	## @param {sw:hash_table} spec
	.output_stream.write(sw:character.newline)
	.output_stream.write("  _local uri << _self.build_uri('", path, "', path_parameters, query_parameters)", sw:character.newline)
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.generate_body_validation(request_body_spec)
	## Generate request body from spec.
	## @param {sw:hash_table} request_body_spec
	_local schema_name << _self.get_schema_name(request_body_spec)
	.output_stream.write("  _local body << _self.parse_object_", schema_name, "(request_body)", sw:character.newline)
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.generate_object_parsers()
	## Generate validators for schemas.
	_local components << .api_specs[:components].default(sw:property_list.new())
	_local schemas << sw:property_list.new_from(components[:schemas].default(sw:property_list.new())).sorted_by_key()
	_for name, spec _over schemas.fast_keys_and_elements()
	_loop
		_self.generate_object_parser(name, spec)
	_endloop
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.generate_object_parser(name, spec)
	## Generate a validator from a schema.
	## @param {sw:char16_vector} name
	## @param {sw:hash_table} spec
	_local type << spec[:type]
	_if type <> "object"
	_then
		sw:condition.raise(:not_yet_implemented, :function, type)
	_endif

	_local object_name << name.write_string.as_snake_case()
	.output_stream.write("_pragma(classify_level=advanced, topic={openapi})", sw:character.newline)
	.output_stream.write("_method ", .exemplar_name, ".parse_object_", object_name, "(props)", sw:character.newline)
	.output_stream.write("  ## Validate schema: ", name, sw:character.newline)
	.output_stream.write("  ## @param {sw:equality_property_list} props", sw:character.newline)
	.output_stream.write("  ## @return {sw:equality_property_list}", sw:character.newline)
	.output_stream.write("  _local result << sw:equality_property_list.new()", sw:character.newline)

	_local requireds << sw:equality_set.new_from(spec[:required].default({}))
	_local properties << sw:property_list.new_from(spec[:properties]).sorted_by_key()
	_for name, spec _over properties.fast_keys_and_elements()
	_loop
		.output_stream.write(sw:character.newline)
		_local magik_name << name.write_string.as_snake_case()
		_local mandatory? << requireds.includes?(name)
		_if mandatory?
		_then
			.output_stream.write("  _if props['", magik_name, "'] _is _unset", sw:character.newline)
			.output_stream.write("  _then", sw:character.newline)
			.output_stream.write("	  sw:condition.raise(:mandatory_parameter_missing, :name, '", magik_name, "')", sw:character.newline)
			.output_stream.write("  _endif", sw:character.newline)
		_endif

		_if spec[:type] = "array"
		_then
			_local items << spec[:items]
			.output_stream.write("  result['", name, "'] << sw:rope.new()", sw:character.newline)
			.output_stream.write("  _for val _over props['", magik_name, "'].fast_elements()", sw:character.newline)
			.output_stream.write("  _loop", sw:character.newline)

			_local schema_type <<
				_if items.includes_key?(:type)
				_then
					>> items[:type]
				_endif
			_local parse_method <<
				_if items.includes_key?(:|$ref|)
				_then
					_local ref_name << items[:|$ref|]
					_local magik_ref_name << ref_name.split_by(%/).last.as_snake_case()
					>> "parse_object_" + magik_ref_name
				_elif schema_type _isnt _unset
				_then
					_if openapi_interface_base.method(:|parse_| + schema_type + :|()|) _is _unset
					_then
						sw:condition.raise(:not_yet_implemented, :function, :|parse_| + schema_type)
					_endif

					>> "parse_" + schema_type
				_endif
			.output_stream.write("	  _local parsed << _self.", parse_method, "(val)", sw:character.newline)
			.output_stream.write("	  result['", name, "'].add_last(parsed)", sw:character.newline)
			.output_stream.write("  _endloop", sw:character.newline)
		_elif spec.includes_key?(:|$ref|)
		_then
			_local ref_name << spec[:|$ref|]
			_local magik_ref_name << ref_name.split_by(%/).last.as_snake_case()
			_if _not mandatory?
			_then
				.output_stream.write("  _if props['", magik_name, "'] _isnt _unset", sw:character.newline)
				.output_stream.write("  _then", sw:character.newline)
				.output_stream.write("	  result['", name, "'] << _self.parse_object_", magik_ref_name, "(props['", magik_name, "'])", sw:character.newline)
				.output_stream.write("  _endif", sw:character.newline)
			_else
				.output_stream.write("  result['", name, "'] << _self.parse_object_", magik_ref_name, "(props['", magik_name, "'])", sw:character.newline)
			_endif
		_elif spec.includes_key?(:|additionalProperties|)
		_then
			sw:condition.raise(:warning, :string, "additionalProperties for '" + name + "' might not be correct")
			.output_stream.write("  result['", name, "'] << props['", magik_name, "']", sw:character.newline)
		_else
			_local schema_type <<
				_if spec.includes_key?(:type)
				_then
					>> spec[:type]
				_endif
			_if schema_type _isnt _unset _andif
			    openapi_interface_base.method(:|parse_| + schema_type + :|()|) _is _unset
			_then
				sw:condition.raise(:not_yet_implemented, :function, :|parse_| + schema_type)
			_endif

			_local validator << _self.get_schema_validator(spec)
			_if _not mandatory?
			_then
				.output_stream.write("  _if props['", magik_name, "'] _isnt _unset", sw:character.newline)
				.output_stream.write("  _then", sw:character.newline)
				.output_stream.write("	  result['", name, "'] << _self.parse_", schema_type, "(props['", magik_name, "'], ", validator, ")", sw:character.newline)
				.output_stream.write("  _endif", sw:character.newline)
			_else
				.output_stream.write("  result['", name, "'] << _self.parse_", schema_type, "(props['", magik_name, "'], ", validator, ")", sw:character.newline)
			_endif
		_endif
	_endloop

	.output_stream.write(sw:character.newline)
	.output_stream.write("  _return result", sw:character.newline)
	.output_stream.write("_endmethod", sw:character.newline)
	.output_stream.write("$", sw:character.newline)
	.output_stream.write(character.newline)
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.create_output_stream()
	## Create a new output stream.
	## @return {sw:text_buffered_output_stream}
	_return sw:external_text_output_stream.new(.target_path)
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.get_path_query_parameters(spec)
	## Extract path and query parameters from spec.
	## @param {sw:hash_table} spec
	## @return {sw:rope} Query parameters.
	## @return {sw:rope} Path parametesr.
	_local spec_parameters << spec[:parameters].default(sw:rope.new())
	_local path_parameters << spec_parameters.select(sw:predicate.using(_proc(param) _return param[:in] = "path" _endproc))
	_local query_parameters << spec_parameters.select(sw:predicate.using(_proc(param) _return param[:in] = "query" _endproc))
	_return path_parameters, query_parameters
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.get_schema_validator(schema)
	## Get schema validator, if applicable.
	## @return {sw:char16_vector|sw:unset}
	_local schema_format << schema[:format]
	_if _self.format_validators.includes_key?(schema_format)
	_then
		validator << _self.format_validators[schema_format]
	_elif schema[:enum] _isnt _unset
	_then
		_local values << schema[:enum].map(_proc(val) _return val.print_string _endproc)
		validator << write_string("predicate.in(:yourself, {", values.join_as_strings(","), "})")
	_elif schema[:items] _isnt _unset
	_then
		# This is handled elsewhere.
		validator << "_unset"
	_else
		validator << "_unset"
	_endif
	_return validator
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.parse_schema(schema)
	## Generate expected_type + validator from schema.
	## @param {sw:hash_table} schema
	## @return {sw:char16_vector} expected_type
	## @return {sw:char16_vector} validator
	_local schema_type << schema[:type]
	_if schema.includes_key?(:|$ref|)
	_then

	_else
		_if _not _self.type_mapping.includes_key?(schema_type)
		_then
			# print(schema)
			# sw:condition.raise(:not_yet_implemented, :function, schema)
			_return
		_endif
	_endif

	_local expected_type << write_string("sw:", _self.type_mapping[schema_type].class_name)

	_local validator << _unset
	_local schema_format << schema[:format]
	_if _self.format_validators.includes_key?(schema_format)
	_then
		validator << _self.format_validators[schema_format]
	_elif schema[:enum] _isnt _unset
	_then
		_local values << schema[:enum].map(_proc(val) _return val.print_string _endproc)
		validator << write_string("predicate.in(:yourself, {", values.join_as_strings(","), "})")
	_elif schema[:items] _isnt _unset
	_then
		# This is handled elsewhere.
		validator << "_unset"
	_else
		validator << "_unset"
	_endif
	_return expected_type, validator
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.get_parameter_type(spec_parameter)
	## Get type for parameter.
	## @param {sw:hash_table} spec_parameter
	## @return {sw:char16_vector}
	_local types << sw:rope.new()

	_local schema << spec_parameter[:schema]
	_if schema _isnt _unset
	_then
		_local schema_type << schema[:type]
		_local sw_type << _self.type_mapping[schema_type]
		_local sw_type_str << "sw:" + sw_type.class_name
		types.add_last(sw_type_str)
	_endif

	_if spec_parameter[:required] _isnt _true
	_then
		types.add_last("sw:unset")
	_endif

	_return types.join_as_strings("|")
_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.get_parameter_description(spec_parameter)
	## Get description for parameter.
	## @param {sw:hash_table} spec_parameter
	## @return {sw:char16_vector}

_endmethod
$

_pragma(classify_level=advanced, topic={openapi})
_private _method openapi_interface_generator.get_schema_name(request_body_spec)
	## Get the name of the schema.
	## @param {sw:property_list} request_body_spec
	## @return {sw:char16_vector} Name of the schema.
	_local content << request_body_spec[:content].default(sw:property_list.new())
	_local mime_type << content[:|application/json|].default(sw:property_list.new())
	_local schema << mime_type[:schema].default(sw:property_list.new())
	_local ref << schema[:|$ref|]
	_if ref _is _unset
	_then
		sw:condition.raise(:not_yet_implemented, :function, :schema)
	_endif

	_return ref.split_by(%/).last.as_snake_case()
_endmethod
$